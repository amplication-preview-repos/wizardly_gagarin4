/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmailNotification } from "./EmailNotification";
import { EmailNotificationCountArgs } from "./EmailNotificationCountArgs";
import { EmailNotificationFindManyArgs } from "./EmailNotificationFindManyArgs";
import { EmailNotificationFindUniqueArgs } from "./EmailNotificationFindUniqueArgs";
import { CreateEmailNotificationArgs } from "./CreateEmailNotificationArgs";
import { UpdateEmailNotificationArgs } from "./UpdateEmailNotificationArgs";
import { DeleteEmailNotificationArgs } from "./DeleteEmailNotificationArgs";
import { EmailNotificationService } from "../emailNotification.service";
@graphql.Resolver(() => EmailNotification)
export class EmailNotificationResolverBase {
  constructor(protected readonly service: EmailNotificationService) {}

  async _emailNotificationsMeta(
    @graphql.Args() args: EmailNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmailNotification])
  async emailNotifications(
    @graphql.Args() args: EmailNotificationFindManyArgs
  ): Promise<EmailNotification[]> {
    return this.service.emailNotifications(args);
  }

  @graphql.Query(() => EmailNotification, { nullable: true })
  async emailNotification(
    @graphql.Args() args: EmailNotificationFindUniqueArgs
  ): Promise<EmailNotification | null> {
    const result = await this.service.emailNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmailNotification)
  async createEmailNotification(
    @graphql.Args() args: CreateEmailNotificationArgs
  ): Promise<EmailNotification> {
    return await this.service.createEmailNotification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmailNotification)
  async updateEmailNotification(
    @graphql.Args() args: UpdateEmailNotificationArgs
  ): Promise<EmailNotification | null> {
    try {
      return await this.service.updateEmailNotification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailNotification)
  async deleteEmailNotification(
    @graphql.Args() args: DeleteEmailNotificationArgs
  ): Promise<EmailNotification | null> {
    try {
      return await this.service.deleteEmailNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
