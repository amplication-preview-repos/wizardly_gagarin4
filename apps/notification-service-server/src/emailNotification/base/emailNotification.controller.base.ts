/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmailNotificationService } from "../emailNotification.service";
import { EmailNotificationCreateInput } from "./EmailNotificationCreateInput";
import { EmailNotification } from "./EmailNotification";
import { EmailNotificationFindManyArgs } from "./EmailNotificationFindManyArgs";
import { EmailNotificationWhereUniqueInput } from "./EmailNotificationWhereUniqueInput";
import { EmailNotificationUpdateInput } from "./EmailNotificationUpdateInput";

export class EmailNotificationControllerBase {
  constructor(protected readonly service: EmailNotificationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmailNotification })
  async createEmailNotification(
    @common.Body() data: EmailNotificationCreateInput
  ): Promise<EmailNotification> {
    return await this.service.createEmailNotification({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sentAt: true,
        recipientEmail: true,
        subject: true,
        message: true,
        contract: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmailNotification] })
  @ApiNestedQuery(EmailNotificationFindManyArgs)
  async emailNotifications(
    @common.Req() request: Request
  ): Promise<EmailNotification[]> {
    const args = plainToClass(EmailNotificationFindManyArgs, request.query);
    return this.service.emailNotifications({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sentAt: true,
        recipientEmail: true,
        subject: true,
        message: true,
        contract: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmailNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async emailNotification(
    @common.Param() params: EmailNotificationWhereUniqueInput
  ): Promise<EmailNotification | null> {
    const result = await this.service.emailNotification({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        sentAt: true,
        recipientEmail: true,
        subject: true,
        message: true,
        contract: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmailNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmailNotification(
    @common.Param() params: EmailNotificationWhereUniqueInput,
    @common.Body() data: EmailNotificationUpdateInput
  ): Promise<EmailNotification | null> {
    try {
      return await this.service.updateEmailNotification({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          sentAt: true,
          recipientEmail: true,
          subject: true,
          message: true,
          contract: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmailNotification })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmailNotification(
    @common.Param() params: EmailNotificationWhereUniqueInput
  ): Promise<EmailNotification | null> {
    try {
      return await this.service.deleteEmailNotification({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          sentAt: true,
          recipientEmail: true,
          subject: true,
          message: true,
          contract: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
