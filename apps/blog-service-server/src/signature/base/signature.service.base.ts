/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Signature as PrismaSignature,
  Contract as PrismaContract,
} from "@prisma/client";

export class SignatureServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SignatureCountArgs, "select">
  ): Promise<number> {
    return this.prisma.signature.count(args);
  }

  async signatures(
    args: Prisma.SignatureFindManyArgs
  ): Promise<PrismaSignature[]> {
    return this.prisma.signature.findMany(args);
  }
  async signature(
    args: Prisma.SignatureFindUniqueArgs
  ): Promise<PrismaSignature | null> {
    return this.prisma.signature.findUnique(args);
  }
  async createSignature(
    args: Prisma.SignatureCreateArgs
  ): Promise<PrismaSignature> {
    return this.prisma.signature.create(args);
  }
  async updateSignature(
    args: Prisma.SignatureUpdateArgs
  ): Promise<PrismaSignature> {
    return this.prisma.signature.update(args);
  }
  async deleteSignature(
    args: Prisma.SignatureDeleteArgs
  ): Promise<PrismaSignature> {
    return this.prisma.signature.delete(args);
  }

  async getContract(parentId: string): Promise<PrismaContract | null> {
    return this.prisma.signature
      .findUnique({
        where: { id: parentId },
      })
      .contract();
  }
}
