/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SignatureService } from "../signature.service";
import { SignatureCreateInput } from "./SignatureCreateInput";
import { Signature } from "./Signature";
import { SignatureFindManyArgs } from "./SignatureFindManyArgs";
import { SignatureWhereUniqueInput } from "./SignatureWhereUniqueInput";
import { SignatureUpdateInput } from "./SignatureUpdateInput";

export class SignatureControllerBase {
  constructor(protected readonly service: SignatureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Signature })
  async createSignature(
    @common.Body() data: SignatureCreateInput
  ): Promise<Signature> {
    return await this.service.createSignature({
      data: {
        ...data,

        contract: data.contract
          ? {
              connect: data.contract,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        signerEmail: true,
        signedAt: true,
        signatureImage: true,

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Signature] })
  @ApiNestedQuery(SignatureFindManyArgs)
  async signatures(@common.Req() request: Request): Promise<Signature[]> {
    const args = plainToClass(SignatureFindManyArgs, request.query);
    return this.service.signatures({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        signerEmail: true,
        signedAt: true,
        signatureImage: true,

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Signature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async signature(
    @common.Param() params: SignatureWhereUniqueInput
  ): Promise<Signature | null> {
    const result = await this.service.signature({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        signerEmail: true,
        signedAt: true,
        signatureImage: true,

        contract: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Signature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSignature(
    @common.Param() params: SignatureWhereUniqueInput,
    @common.Body() data: SignatureUpdateInput
  ): Promise<Signature | null> {
    try {
      return await this.service.updateSignature({
        where: params,
        data: {
          ...data,

          contract: data.contract
            ? {
                connect: data.contract,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          signerEmail: true,
          signedAt: true,
          signatureImage: true,

          contract: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Signature })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSignature(
    @common.Param() params: SignatureWhereUniqueInput
  ): Promise<Signature | null> {
    try {
      return await this.service.deleteSignature({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          signerEmail: true,
          signedAt: true,
          signatureImage: true,

          contract: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
