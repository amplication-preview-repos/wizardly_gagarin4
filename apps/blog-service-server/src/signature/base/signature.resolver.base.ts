/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Signature } from "./Signature";
import { SignatureCountArgs } from "./SignatureCountArgs";
import { SignatureFindManyArgs } from "./SignatureFindManyArgs";
import { SignatureFindUniqueArgs } from "./SignatureFindUniqueArgs";
import { CreateSignatureArgs } from "./CreateSignatureArgs";
import { UpdateSignatureArgs } from "./UpdateSignatureArgs";
import { DeleteSignatureArgs } from "./DeleteSignatureArgs";
import { Contract } from "../../contract/base/Contract";
import { SignatureService } from "../signature.service";
@graphql.Resolver(() => Signature)
export class SignatureResolverBase {
  constructor(protected readonly service: SignatureService) {}

  async _signaturesMeta(
    @graphql.Args() args: SignatureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Signature])
  async signatures(
    @graphql.Args() args: SignatureFindManyArgs
  ): Promise<Signature[]> {
    return this.service.signatures(args);
  }

  @graphql.Query(() => Signature, { nullable: true })
  async signature(
    @graphql.Args() args: SignatureFindUniqueArgs
  ): Promise<Signature | null> {
    const result = await this.service.signature(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Signature)
  async createSignature(
    @graphql.Args() args: CreateSignatureArgs
  ): Promise<Signature> {
    return await this.service.createSignature({
      ...args,
      data: {
        ...args.data,

        contract: args.data.contract
          ? {
              connect: args.data.contract,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Signature)
  async updateSignature(
    @graphql.Args() args: UpdateSignatureArgs
  ): Promise<Signature | null> {
    try {
      return await this.service.updateSignature({
        ...args,
        data: {
          ...args.data,

          contract: args.data.contract
            ? {
                connect: args.data.contract,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Signature)
  async deleteSignature(
    @graphql.Args() args: DeleteSignatureArgs
  ): Promise<Signature | null> {
    try {
      return await this.service.deleteSignature(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contract, {
    nullable: true,
    name: "contract",
  })
  async getContract(
    @graphql.Parent() parent: Signature
  ): Promise<Contract | null> {
    const result = await this.service.getContract(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
